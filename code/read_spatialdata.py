from spatialdata import SpatialData
from pathlib import Path
from spatialdata_io._constants._constants import MerscopeKeys
from .read_merscope_image import read_merscope_stain_imagestack
from .read_sis_polygons import get_sis_polygons


def read_merscope_sdata(
    input_path: str | Path,
    image_config: dict[str, str],
    polygon_config: dict[str, str],
) -> SpatialData:
    """
    Read in MERSCOPE data into a simple sdata file. This function can account for sis io issues and reads only one stain at a time.
    Assumes particular stucture in the MERSCOPE files.

    Parameters:
    input_path : {str or pathlib.Path}
        Path to MERSCOPE data
    image_config : dict
        Parameters for the read_merscope_stain_imagestack function.
    polygon_config : dict
        Parameters for the read_sis_polygons function. Leaves out transformations which defaults to the one generated by SpatialData.

    Returns:
        sdata : SpatialData
        SpatialData object constructed from these images.
    """
    if type(input_path) is not Path:
        input_path = Path(input_path)

    images_dir = input_path / "images"
    transcripts_path = input_path / MerscopeKeys.TRANSCRIPTS_FILE

    image = read_merscope_stain_imagestack(images_dir, **image_config)

    # Get transformation matrix
    microns_to_pixels = Affine(
        np.genfromtxt(images_dir / MerscopeKeys.TRANSFORMATION_FILE),
        input_axes=("x", "y"),
        output_axes=("x", "y"),
    )

    transformations = {"global": microns_to_pixels}

    points_df = _get_points(transcripts_path, transformations=transformations)
    points_df = points_df.dropna()

    polygons = get_sis_polygons(**polygon_config, transformations=transformations)

    # Generate SpatialData Object
    print("... generating spatialdata object")
    my_images = {f"{image_config['stainings'][0]}": image}
    my_points = {"transcripts": points_df}
    my_shapes = {"sis_seg": polygons}

    return SpatialData(images=my_images, points=my_points, shapes=my_shapes)
